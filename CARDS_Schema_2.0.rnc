# Version 1.0
start = ReportingModule
ReportingModule = element ReportingModule {external "ACRAssist_xml_schema.rnc", DataElements, Rules, EndPoints }
#original line below was providing an validation error because it couldn't find "Metadata.rnc" 
#ReportingModule = element ReportingModule {external "Metadata.rnc", DataElements, Rules, EndPoints }
Citation =
    element Citation {
        attribute PubmedId { xsd:token }?,
        attribute Url { xsd:anyURI }?,
        text
    }+
# definitions for other parts of the schema
codingSystemAttr = attribute CodingSystem { text }
codeAttrs =
    codingSystemAttr?,
    attribute Code { xsd:token }
Diagnosis = element Diagnosis { codeAttrs, text }
# Exam = element Exam { codeAttrs, text } #this is not being used anywhere, but should be used in Followup Exams
Modality = element Modality { codeAttrs }
BodyRegion = element BodyRegion { codeAttrs }
imageElements =
    element Location { text },
    element Label { text }?
# start of the next Section Data Elements
DataElements = element DataElements { DataElementTypes+ }
DataElementTypes =
    ChoiceDataElement
    | NumericDataElement
    | IntegerDataElement
    | MultiChoiceDataElement
    | GlobalValue
    | ComputedDataElement
    | DateTimeDataElement
    | DurationDataElement
    #Can make custom properties in SDC - need to acommodate many different use cases 
GlobalValue =
    element GlobalValue {
        attribute Id { xsd:ID },
        text
    }
Diagrams =
    element Diagrams {
        element Diagram {
            element Location { text },
            element Label { text },
            attribute DisplaySequence { xsd:integer }?,
            attribute IsKeyDiagram { "true" | "false" }?
        }+
    }
    #are these diagrams like an ultrasonographer diagram? What about annotations? does this apply to inserted images as well? 
DisplaySequence =
    attribute DisplaySequence {
        xsd:integer { minInclusive = "0" }
    }
    #Does this refer to display sequence on a hanging protocol? 
baseElementContents =
    attribute Id { xsd:ID },
    attribute CdeId { xsd:token }?,
    #Does this refer to the RSNA CDE library? 
    attribute IsRequired { "true" | "false" }?,
    DisplaySequence?,
    CodableConcept?,
    element Label { text },
    element Hint { text }?,
    Diagrams?,
    element VoiceCommand { text }?,
    #What does voice command do? is this used to trigger things? 
    attribute Editable { "true" | "false" }?,
    attribute Hasprefilled { "true" | "false" }?,
    attribute Output { "true" | "false" }?,
    attribute Unit { text }?,
    attribute SourceFilled { text }?  
    #SDC has different attribute model for how to do this - e.g. @selected
    CodableConcept = element CodableConcept{
    attribute Name {text } ,
    Coding+
    }
    
    Coding = element Coding{
         element System { attribute Value{text}},
         element Version { attribute Value{text}},
         element Code { attribute Value{xsd:token}},
         element Display { attribute Value{text}},
         element UserSelected { attribute Value{"true" | "false"}} ?
    }+
    #Are these for standard terminologies e.g. RadLex, LOINC, SNOMED-CT?
    
ChoiceNotRelevant =  element ChoiceNotRelevant
{
  attribute ChoiceValue {text}, 
  empty
}

baseConditionalPropertyContents =
      ConditionType,
      element IsRelevant {"true" | "false" }?,
      #how do you define IsRelevant? 
      element IsRequired {"true" | "false" }?,
      element DisplaySequence {xsd:integer}?
        #is this like max/minCard in SDC? 
choiceConditionalProperty = element ConditionalProperty { 
        baseConditionalPropertyContents,
        ChoiceNotRelevant?
    }

numericConditionalProperty = element ConditionalProperty {
      baseConditionalPropertyContents,
      element Minimum {xsd:integer}?,
      element Maximum {xsd:integer}?
}

computedValue =
    element ArithmeticExpression { text }
    | element TextExpression { (text | InsertValue)* }
valueBranches =
    element Branch { ConditionType, (computedValue | valueDecisionPoint) }+,
    element DefaultBranch { computedValue | valueDecisionPoint }?
valueDecisionPoint = element DecisionPoint { valueBranches }
ComputedDataElement =
    element ComputedDataElement {
        attribute Id { xsd:ID },
        DisplaySequence?,
        attribute ShowValue { "true" | "false" }?,
        element Label { text }?,
        element Hint { text }?,
        Diagrams?,
        (computedValue | valueDecisionPoint)
    }
    #does this do a calculation? How do you combine this with ConditionType/ConditionalProperty to produce something like a TI-RADS score? 
NumericDataElement =
    element NumericDataElement {
        baseElementContents,
        element Minimum { xsd:decimal }?,
        element Maximum { xsd:decimal }?,
        element ConditionalProperties { numericConditionalProperty+ }?
    }
IntegerDataElement =
    element IntegerDataElement {
        baseElementContents,
        element Minimum { xsd:integer }?,
        element Maximum { xsd:integer }?,
        element ConditionalProperties { numericConditionalProperty+ }?
    }
    
 DateTimeDataElement = 
     element DateTimeDataElement {
          baseElementContents,
          element Format { text }
      }
      #What dateTime format are you using? ISO? 
 DurationDataElement = 
    element DurationDataElement {
            baseElementContents
        }
    #Can we get an example of when this is used? 
Choice =
    element Choice {
        element Value { xsd:token },
        element Label { text },
        element Hint { text }?,
        element VoiceCommand { text }?,
        attribute IsDefault { "true" | "false" }?,
        element ReportText { text }?
    }
    #What is ReportText, is it a freetext field? Does this create a text field for VoiceCommand? 
ChoiceInfo = element ChoiceInfo { Choice, Choice+ }
imageMapStyleAttributes =
    attribute Outline { text }?,
    attribute HoverFill { text }?,
    attribute SelectedFill { text }?
    #What are definitions and examples of these? 
ImageMap =
    element ImageMap {
        imageElements,
        element DrawStyle { imageMapStyleAttributes, empty }?,
        element Map {
            element Area {
                attribute Shape { "rect" | "poly" | "circle" },
                attribute Coords { text },
                attribute ChoiceValue { xsd:token },
                imageMapStyleAttributes,
                empty
            }+
        }
    }
    #Can this draw on any image? I.e. acquired image or diagram? 
ChoiceDataElement =
    element ChoiceDataElement {
        attribute AllowFreetext { "true" | "false" }?,
        baseElementContents,
        ChoiceInfo,
        element ConditionalProperties { choiceConditionalProperty+ }?,
        ImageMap?
    }
MultiChoiceDataElement =
    element MultiChoiceDataElement { 
    baseElementContents, 
    ChoiceInfo, 
    element ConditionalProperties { choiceConditionalProperty+ }?, 
    ImageMap? 
    }
    
# Start of next section (RULES)
ConditionType = AndCondition | OrCondition | NotCondition
ConditionType |= EqualCondition | GreaterThanCondition | LessThanCondition
#Does this work on numeric items? E.g. a nodule measurement greater than 4mm triggers another section for example? 
ConditionType |= GreaterThanOrEqualsCondition | LessThanOrEqualsCondition
ConditionType |= ContainsCondition | HasAnyNChoicesCondition
AndCondition = element AndCondition { ConditionType, ConditionType+ }
OrCondition = element OrCondition { ConditionType, ConditionType+ }
NotCondition = element NotCondition { ConditionType+ }
dataElementIdAttribute = attribute DataElementId { xsd:IDREF }
comparisonConditionContents =
    dataElementIdAttribute,
    attribute ComparisonValue { xsd:token }
    #Does this compare two fields, or 2 values? Or can it compare to something from outside of the form? 
EqualCondition = element EqualCondition { comparisonConditionContents }
GreaterThanCondition = element GreaterThanCondition { comparisonConditionContents }
LessThanCondition = element LessThanCondition { comparisonConditionContents }
GreaterThanOrEqualsCondition = element GreaterThanOrEqualsCondition { comparisonConditionContents }
LessThanOrEqualsCondition = element LessThanOrEqualsCondition { comparisonConditionContents }
HasAnyNChoicesCondition =
    element HasAnyNChoicesCondition {
        dataElementIdAttribute,
        attribute MinimumChoices { xsd:positiveInteger }
    }
ContainsCondition =
    element ContainsCondition {
        dataElementIdAttribute,
        attribute ComparisonValue { xsd:token }
    }
Rules = element Rules { DecisionPoint }
# { branchModifiers, DecisionPoint }
#What do the branchModifiers do? 
DataElementRef =
    element DataElementRef {
        attribute DataElementId { xsd:IDREF },
        empty
    }
    #What does DataElementRef do? 
ChoiceRef =
    element ChoiceRef {
        attribute DataElementId { xsd:IDREF },
        attribute ChoiceValue { xsd:token },
        empty
    }
branchModifiers =
    # element RequiredDataElements { DataElementRef+ }?, 
    element NotRelevantDataElements { DataElementRef+ }?
# element RelevantDataElements { DataElementRef+ }?,
# element NotValidChoices { ChoiceRef+ }?
DecisionPoint =
    element DecisionPoint {
        attribute Id { xsd:ID },
        element Label { text },
        element Description { text }?,
        # HtmlContent -> text
        # element DescriptionImage { imageElements }?,
        element Branch {
            element Label { text }?,
            branchModifiers,
            ConditionType,
            (EndPointRef | DecisionPoint)
        }+,
        element DefaultBranch {
            element Label { text }?,
            branchModifiers,
            (EndPointRef | DecisionPoint)
        }?
    }
# Begin ENDPOINTS Section
#What does ENDPOINTS Section do? 
EndPointRef =
    element EndPointRef {
        attribute EndPointId { xsd:IDREF },
        element Label { text }?,
        element Description { text }?
    }
EndPoints =
    element EndPoints {
        element TemplatePartial {
            attribute Id { xsd:ID },
            TextTemplateContent
        }*,
        element EndPoint {
            attribute Id { xsd:ID },
            element Label { text }?,
            # (element ErrorMessage { text } | 
            #  (         
            Diagnosis?,
            ReportTexts,
            ActionableFinding?,
            ImagingFollowup?
        }+
    }
ReportTexts = element ReportTexts { ReportText+ }
ReportText = element ReportText { sectionIdAttr, TextTemplateContent }+
sectionIdAttr =
    attribute SectionId {
        "findings" | "impression" | "recommendation" | "impressionRecommendation" | "citation"
    }
    #Are tehse formally defined sections? SDC leaves this to implementator and Form Creator 
recommendationBase =
    element ClinicalCondition { text }?,
    element References { Citation+ }?,
    element EvidenceLevel { codingSystemAttr, xsd:token }?
timeFrame =
    element RecommendedTimeFrame {
        attribute Earliest { xsd:duration },
        attribute Latest { xsd:duration }?,
        empty
    }
ImagingFollowup =
    element ImagingFollowup {
        recommendationBase,
        element PreferredImagingExam { codeAttrs, text },
        element AcceptableImagingExams { Exam+ },
        element IndicationForFollowup { codeAttrs, text },
        timeFrame
    }
ActionableFinding =
    element ActionableFinding {
        attribute Category { text },
        empty
    }
Exam =
    element Exam {
        attribute Code { text },
        attribute CodeSystem { text },
        attribute Modality { text },
        attribute BodyRegion { text },
        text
    }
TextTemplateContent = (text | templateTags)*
templateTags =
    InsertValue | InsertPartial | SectionIf | SectionIfNot | SectionIfValue | SectionIfValueNot
InsertValue =
    element InsertValue {
        attribute DataElementId { xsd:IDREF },
        attribute SignificantDigits { xsd:integer }?,
        empty
    }
InsertPartial =
    element InsertPartial {
        attribute PartialId { xsd:IDREF },
        empty
    }
SectionIf =
    element SectionIf {
        attribute DataElementId { xsd:IDREF },
        TextTemplateContent
    }
SectionIfValue =
    element SectionIfValue {
        attribute DataElementId { xsd:IDREF },
        attribute ComparisonValue { xsd:token },
        TextTemplateContent
    }
SectionIfNot =
    element SectionIfNot {
        attribute DataElementId { xsd:IDREF },
        TextTemplateContent
    }
SectionIfValueNot =
    element SectionIfValueNot {
        attribute DataElementId { xsd:IDREF },
        attribute ComparisonValue { xsd:token },
        TextTemplateContent
    }
